<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Try code - Page</title>
    </head>
    <body>
        <div>
            <div class="modal_code_result">
                <div>
                    <h4>Código:</h4>
                    <pre id="preCode" class="preCode"><code id="codeBlock" class="language-javascript" contenteditable spellcheck="false"></code></pre>
                </div>

                <div class="modal_result">
                    <h4>Resultado:</h4>
                    <iframe srcdoc="" id="renderedCodeBox" class="renderedCodeBox"></iframe>
                    <div class="modal_buttons">
                        <button class="executeCode" onclick="executeCode()">Probar código</button>
                        <button class="restoreCode" onclick="restoreCode()">Reestablecer código</button>
                    </div>
                </div>
            </div>
        </div>
        <script is:inline>
            let originalCode = '';
            let isOriginalCodeSet = false; // Para controlar que solo se guarde una vez
            var code = '';

            function executeCode() {
                const codeBlock = document.getElementById('codeBlock');
                const code = codeBlock.textContent;
                const iframe = document.getElementById("renderedCodeBox");

                if (!isOriginalCodeSet) {
                    originalCode = codeBlock.innerHTML;
                    isOriginalCodeSet = true; // Marcar que el código original ya fue guardado
                }

                const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                // Limpiar el contenido del iframe
                iframeDoc.open();
                iframeDoc.close();


                // Crear un contenedor para los logs
                const logContainer = iframeDoc.createElement('div');
                logContainer.classList.add('logContainer');
                iframeDoc.body.appendChild(logContainer);

                // Sobrescribir console.log y console.error en el contexto del iframe
                iframe.contentWindow.console.log = function(...args) {
                    const logMessage = iframeDoc.createElement('div');
                    logMessage.textContent = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg).join(' ');
                    logContainer.appendChild(logMessage);
                };

                iframe.contentWindow.console.error = function(...args) {
                    const errorMessage = iframeDoc.createElement('div');
                    errorMessage.style.color = 'red'; // Estilo para errores
                    errorMessage.textContent = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : arg).join(' ');
                    logContainer.appendChild(errorMessage);
                };


                // Siempre crear y ejecutar un script para ejecutar el código dentro del iframe
                const script = iframeDoc.createElement('script');
                script.textContent = `
                    (function() {
                        try {
                            ${code}
                        } catch (error) {
                            console.error('Error:', error.message);
                        }
                    })();
                `;
                iframeDoc.body.appendChild(script);
            }

            function restoreCode() {
                const codeBlock = document.getElementById('codeBlock');

                if (originalCode !== '') {
                    codeBlock.innerHTML = originalCode; // Restaura el código original
                } else {
                    console.error('Error: No hay código original para restaurar');
                }
            }
            function addCopyButtons() {
                let codeBlocks = document.querySelectorAll('pre:not(#preCode)');

                codeBlocks.forEach((block, index) => {
                    // Crear el botón de copiar
                    let button = document.createElement('button');
                    block.setAttribute("id", `codeBlock-${index}`);
                    button.className = 'copy-button';
                    button.type = 'button';
                    button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="copy-icon bi bi-clipboard" viewBox="0 0 16 16"><path d="M5.5 2a.5.5 0 0 1 .5.5V3h4V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5V3h1a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h1V2.5a.5.5 0 0 1 .5-.5h1zm-1 2h8v9H4V4zm5-1H7a1 1 0 0 0-1 1v1h6V4a1 1 0 0 0-1-1z"/></svg> Copiar';

                    // Añadir evento de click al botón de copiar
                    button.addEventListener('click', async () => {
                        let code = block.querySelector('code');
                        let text = code.innerText;

                        try {
                            await navigator.clipboard.writeText(text);
                            button.innerHTML = "¡Copiado!";
                            setTimeout(() => {
                                button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="copy-icon bi bi-clipboard" viewBox="0 0 16 16"><path d="M5.5 2a.5.5 0 0 1 .5.5V3h4V2.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5V3h1a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h1V2.5a.5.5 0 0 1 .5-.5h1zm-1 2h8v9H4V4zm5-1H7a1 1 0 0 0-1 1v1h6V4a1 1 0 0 0-1-1z"/></svg> Copiar';
                            }, 1000);
                        } catch (err) {
                            console.error('Error al copiar: ', err);
                            button.innerHTML = 'Error';
                        }
                    }); 
                    // Insertar el botón dentro del bloque de código <pre>
                    block.appendChild(button);

                    //Botones de probar codigo solo si aparece el console.log y no tiene un elemento anterior con no-try-code
                    let codeElement = block.querySelector('code');
                    let noTryCode = block.previousElementSibling;

                    if (codeElement && codeElement.innerText.includes('console.log') && !noTryCode.innerText.includes('//no-try-code')) {
                        let testButton = document.createElement('button');
                        testButton.className = 'test-btn';
                        testButton.id = 'test-btn';
                        testButton.type = 'button';
                        testButton.innerHTML = 'Probar código';

                        testButton.addEventListener('click', function() {
                            document.getElementById("renderedCodeBox").srcdoc = "";
                            code = block.querySelector('code').innerText;
                            document.getElementById('codeBlock').innerText = code;
                            originalCode = code;
                            document.querySelector('.modal').showModal();

                            //Dar estilo a la salida del console.log del bloque de codigo.
                            document.getElementById("renderedCodeBox").addEventListener("load", function() {
                                var iframeDocument = this.contentDocument || this.contentWindow.document; 
                                var styleElement = document.createElement("style");
                                styleElement.textContent = ".logContainer { color: white; }";
                                iframeDocument.head.appendChild(styleElement);
                            });
                            
                        });

                        block.appendChild(testButton);
                    }
                    noTryCode.innerText = noTryCode.innerText.replace('//no-try-code', '');
                });
            }
  
            document.addEventListener('DOMContentLoaded', function () {
                addCopyButtons();

                // Escuchar el evento astro:after-swap para navegación SPA
                document.addEventListener('astro:after-swap', function () {
                        addCopyButtons();              
                });
            });
        </script>
    </body>
</html>
